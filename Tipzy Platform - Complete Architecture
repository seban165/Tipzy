# Tipzy Platform - Complete Architecture

## Frontend Architecture

### Technology Stack
- **Framework**: React.js with Next.js
- **State Management**: Redux Toolkit
- **Styling**: Tailwind CSS with custom theme
- **API Communication**: Axios
- **Form Handling**: React Hook Form with Yup validation
- **Image Handling**: react-image-crop, next/image
- **Authentication**: JWT with HttpOnly cookies
- **Payment Integration**: Stripe Elements

### Directory Structure
```
frontend/
├── public/
│   ├── assets/
│   │   ├── images/
│   │   └── icons/
├── src/
│   ├── components/
│   │   ├── common/
│   │   │   ├── Button.jsx
│   │   │   ├── Modal.jsx
│   │   │   ├── ImageUploader.jsx
│   │   │   └── ...
│   │   ├── layout/
│   │   │   ├── Header.jsx
│   │   │   ├── Footer.jsx
│   │   │   └── Sidebar.jsx
│   │   ├── creators/
│   │   │   ├── CreatorCard.jsx
│   │   │   ├── CreatorGallery.jsx
│   │   │   └── ...
│   │   ├── shop/
│   │   │   ├── ProductCard.jsx
│   │   │   ├── ShopGrid.jsx
│   │   │   └── ...
│   │   └── membership/
│   │       ├── PlanCard.jsx
│   │       ├── MembershipBenefits.jsx
│   │       └── ...
│   ├── pages/
│   │   ├── index.js
│   │   ├── shop.js
│   │   ├── upload.js
│   │   ├── membership.js
│   │   ├── creators/
│   │   │   ├── index.js
│   │   │   └── [username].js
│   │   ├── account/
│   │   │   ├── dashboard.js
│   │   │   ├── settings.js
│   │   │   └── ...
│   │   └── ...
│   ├── hooks/
│   │   ├── useAuth.js
│   │   ├── useUpload.js
│   │   └── ...
│   ├── store/
│   │   ├── index.js
│   │   ├── slices/
│   │   │   ├── authSlice.js
│   │   │   ├── creatorSlice.js
│   │   │   ├── shopSlice.js
│   │   │   └── ...
│   │   └── thunks/
│   │       ├── authThunks.js
│   │       └── ...
│   ├── services/
│   │   ├── api.js
│   │   ├── authService.js
│   │   ├── uploadService.js
│   │   └── ...
│   ├── utils/
│   │   ├── formatters.js
│   │   ├── validators.js
│   │   └── ...
│   ├── styles/
│   │   ├── globals.css
│   │   └── ...
│   └── contexts/
│       ├── AuthContext.jsx
│       └── ...
├── .env.local
├── .gitignore
├── package.json
├── tailwind.config.js
└── next.config.js
```

### Key Frontend Features

#### 1. Photo Upload and Management
- Drag-and-drop interface with preview
- Multi-file uploading with progress indicators
- Metadata editor for photos (title, description, tags)
- Privacy settings (public, members-only, specific tiers)
- Batch operations (delete, categorize, price setting)

#### 2. Creator Profiles
- Customizable layout options
- Stats dashboard (views, supporters, earnings)
- Bio and social links section
- Content organization (collections, albums)
- Custom membership tier creation

#### 3. Shop Implementation
- Product catalog management
- Pricing and inventory controls
- Digital downloads fulfillment
- Print order processing and tracking
- Discount code management

#### 4. Membership System
- Tier subscription management
- Member-only content access controls
- Supporter dashboard
- Messaging system between creators and members
- Payment method management

#### 5. User Experience
- Responsive design for all devices
- Dark/light mode
- Infinite scrolling galleries
- Advanced search and filtering
- Notifications system

## Backend Architecture

### Technology Stack
- **Framework**: Node.js with Express.js (or NestJS for more structure)
- **Database**: PostgreSQL with TypeORM
- **Image Storage**: AWS S3
- **Authentication**: Passport.js with JWT
- **Payment Processing**: Stripe API
- **Caching**: Redis
- **Search**: Elasticsearch
- **Queuing**: Bull for background jobs
- **Testing**: Jest
- **Logging**: Winston
- **Monitoring**: Prometheus with Grafana

### Directory Structure
```
backend/
├── src/
│   ├── config/
│   │   ├── database.js
│   │   ├── aws.js
│   │   ├── stripe.js
│   │   └── ...
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── creatorController.js
│   │   ├── photoController.js
│   │   ├── shopController.js
│   │   ├── membershipController.js
│   │   └── ...
│   ├── models/
│   │   ├── User.js
│   │   ├── Photo.js
│   │   ├── Product.js
│   │   ├── MembershipTier.js
│   │   ├── Subscription.js
│   │   ├── Order.js
│   │   └── ...
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── creatorRoutes.js
│   │   ├── photoRoutes.js
│   │   ├── shopRoutes.js
│   │   ├── membershipRoutes.js
│   │   └── ...
│   ├── services/
│   │   ├── authService.js
│   │   ├── uploadService.js
│   │   ├── paymentService.js
│   │   ├── notificationService.js
│   │   └── ...
│   ├── middlewares/
│   │   ├── auth.js
│   │   ├── rateLimiter.js
│   │   ├── errorHandler.js
│   │   └── ...
│   ├── utils/
│   │   ├── validators.js
│   │   ├── formatters.js
│   │   └── ...
│   ├── jobs/
│   │   ├── imageProcessing.js
│   │   ├── emailNotifications.js
│   │   └── ...
│   ├── seeders/
│   │   ├── users.js
│   │   ├── plans.js
│   │   └── ...
│   └── app.js
├── migrations/
├── tests/
│   ├── unit/
│   ├── integration/
│   └── e2e/
├── .env
├── .gitignore
├── package.json
└── docker-compose.yml
```

### Database Schema

#### Users Table
```sql
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  username VARCHAR(50) UNIQUE NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  password_hash VARCHAR(100) NOT NULL,
  display_name VARCHAR(100),
  bio TEXT,
  profile_image_url VARCHAR(255),
  cover_image_url VARCHAR(255),
  is_creator BOOLEAN DEFAULT false,
  stripe_account_id VARCHAR(100),
  stripe_customer_id VARCHAR(100),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Photos Table
```sql
CREATE TABLE photos (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  title VARCHAR(100) NOT NULL,
  description TEXT,
  s3_key VARCHAR(255) NOT NULL,
  original_url VARCHAR(255) NOT NULL,
  thumbnail_url VARCHAR(255) NOT NULL,
  medium_url VARCHAR(255) NOT NULL,
  high_res_url VARCHAR(255),
  width INTEGER NOT NULL,
  height INTEGER NOT NULL,
  file_size INTEGER NOT NULL,
  file_type VARCHAR(20) NOT NULL,
  is_public BOOLEAN DEFAULT true,
  membership_tier_id INTEGER REFERENCES membership_tiers(id),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Membership_Tiers Table
```sql
CREATE TABLE membership_tiers (
  id SERIAL PRIMARY KEY,
  creator_id INTEGER REFERENCES users(id),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'USD',
  benefits TEXT[],
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Subscriptions Table
```sql
CREATE TABLE subscriptions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  creator_id INTEGER REFERENCES users(id),
  tier_id INTEGER REFERENCES membership_tiers(id),
  stripe_subscription_id VARCHAR(100),
  status VARCHAR(20) NOT NULL,
  current_period_start TIMESTAMP,
  current_period_end TIMESTAMP,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Products Table
```sql
CREATE TABLE products (
  id SERIAL PRIMARY KEY,
  creator_id INTEGER REFERENCES users(id),
  photo_id INTEGER REFERENCES photos(id),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'USD',
  product_type VARCHAR(20) NOT NULL, -- digital, print, etc.
  is_available BOOLEAN DEFAULT true,
  inventory_count INTEGER, -- for physical products
  shipping_details JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Orders Table
```sql
CREATE TABLE orders (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  stripe_payment_intent_id VARCHAR(100),
  status VARCHAR(20) NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'USD',
  shipping_address JSONB,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

#### Order_Items Table
```sql
CREATE TABLE order_items (
  id SERIAL PRIMARY KEY,
  order_id INTEGER REFERENCES orders(id),
  product_id INTEGER REFERENCES products(id),
  quantity INTEGER NOT NULL,
  unit_price DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

### Key Backend Features

#### 1. API Endpoints

##### Authentication
- `POST /api/auth/register` - Register new user
- `POST /api/auth/login` - User login
- `POST /api/auth/logout` - User logout
- `GET /api/auth/me` - Get current user
- `POST /api/auth/password/reset` - Password reset
- `POST /api/auth/refresh-token` - Refresh JWT

##### Creators
- `GET /api/creators` - List creators
- `GET /api/creators/:username` - Get creator profile
- `PUT /api/creators/profile` - Update creator profile
- `GET /api/creators/:id/stats` - Get creator stats
- `GET /api/creators/:id/tiers` - Get creator membership tiers

##### Photos
- `POST /api/photos/upload` - Upload photos
- `GET /api/photos` - List photos (with filters)
- `GET /api/photos/:id` - Get photo details
- `PUT /api/photos/:id` - Update photo
- `DELETE /api/photos/:id` - Delete photo
- `POST /api/photos/batch` - Batch operations

##### Memberships
- `GET /api/memberships/tiers` - List all plans
- `POST /api/memberships/tiers` - Create membership tier
- `PUT /api/memberships/tiers/:id` - Update membership tier
- `POST /api/memberships/subscribe` - Subscribe to tier
- `GET /api/memberships/my-subscriptions` - List user subscriptions
- `POST /api/memberships/cancel` - Cancel subscription

##### Shop
- `GET /api/shop/products` - List products
- `GET /api/shop/products/:id` - Get product details
- `POST /api/shop/products` - Create product
- `PUT /api/shop/products/:id` - Update product
- `POST /api/shop/orders` - Create order
- `GET /api/shop/orders` - List user orders
- `GET /api/shop/orders/:id` - Get order details

#### 2. Image Processing Features
- Automatic generation of multiple resolutions
- Watermarking options
- EXIF data extraction and storage
- Image optimization
- Content moderation using AI

#### 3. Payment and Subscription Handling
- Secure payment processing with Stripe
- Subscription management
- Payout management for creators
- Sales tax calculation and reporting
- Refund processing

#### 4. Security Features
- Input validation
- CSRF protection
- Rate limiting
- Data encryption
- SQL injection prevention
- XSS protection
- Regular security audits

#### 5. Performance Optimization
- Image CDN integration
- Database query optimization
- Caching strategies
- Load balancing
- Horizontal scaling capabilities

## Deployment Architecture

### Development Environment
- Docker Compose setup for local development
- Database seeding scripts
- Hot reloading for both frontend and backend

### Production Environment
- **Containerization**: Docker
- **Orchestration**: Kubernetes
- **CI/CD**: GitHub Actions or GitLab CI
- **Cloud Provider**: AWS
  - EKS for Kubernetes
  - RDS for PostgreSQL
  - S3 for image storage
  - CloudFront for CDN
  - Lambda for image processing
  - ElastiCache for Redis
  - ELB for load balancing
- **Monitoring**: Datadog or New Relic
- **Logging**: ELK Stack
- **Security**: AWS WAF, Shield

### Scaling Strategy
- Horizontal scaling for API servers
- Read replicas for database
- Sharding for high traffic
- CDN for static assets and images
- Serverless functions for background processing

## Implementation Plan

### Phase 1: Foundation (2-3 weeks)
- Set up project structure (frontend and backend)
- Implement authentication system
- Create basic user profiles
- Develop photo upload functionality
- Set up database schema and migrations

### Phase 2: Core Features (4-6 weeks)
- Implement creator profiles
- Build membership tier system
- Develop shop functionality
- Create payment integration
- Build photo management system

### Phase 3: Enhancement (3-4 weeks)
- Implement search and discovery features
- Add analytics dashboard
- Build notification system
- Develop messaging functionality
- Implement admin panel

### Phase 4: Optimization (2-3 weeks)
- Performance optimization
- Security hardening
- Testing and QA
- Documentation
- Deployment pipeline setup

### Phase 5: Launch Preparation (1-2 weeks)
- Final QA and testing
- Load testing
- Security audit
- Deployment to production
- Monitoring setup
